// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface Bps {
    meta:      BpsMeta;
    producers: Producer[];
}

export interface BpsMeta {
    generated_at: string;
    maintainer:   string;
}

export interface Producer {
    info:            ProducerInfo;
    message_summary: MessageSummary;
    messages:        Message[];
    meta:            ProducerMeta;
    regproducer:     Regproducer;
    output?:         Output;
    input?:          Input;
}

export interface ProducerInfo {
    rank:            number;
    vote_percent:    number;
    country_alpha2?: string;
    country_name?:   string;
    country_number?: string;
    name?:           string;
}

export interface Input {
    nodes:                  InputNode[];
    org:                    InputOrg;
    producer_account_name?: string;
    producer_public_key?:   string;
    account_name?:          string;
    introduce?:             TaglineClass;
    public_key?:            string;
    tagline?:               TaglineClass;
    title?:                 string;
}

export interface TaglineClass {
    en: string;
    zh: string;
}

export interface InputNode {
    location:       LocationLocation;
    node_type?:     NodeType;
    api_endpoint?:  string;
    p2p_endpoint?:  string;
    ssl_endpoint?:  string;
    is_producer?:   boolean;
    bnet_endpoint?: string;
}

export interface LocationLocation {
    country?:   string;
    latitude?:  number | string;
    longitude?: number | string;
    name:       string;
    id?:        string;
}

export enum NodeType {
    Full = "full",
    Peer = "peer",
    Producer = "producer",
    Query = "query",
    Seed = "seed",
}

export interface InputOrg {
    branding?:             PurpleBranding;
    candidate_name?:       string;
    code_of_conduct?:      string;
    email?:                string;
    location:              LocationLocation | string;
    ownership_disclosure?: string;
    social?:               { [key: string]: string };
    website:               string;
    name?:                 string;
    social_network?:       SocialNetwork;
    tagline?:              Tagline;
    phone?:                string;
    introduce?:            PurpleIntroduce;
    org?:                  OrgOrg;
    support?:              Support;
}

export interface PurpleBranding {
    logo_1024?: string;
    logo_256?:  string;
    logo_svg?:  string;
    cover?:     string;
    logo?:      string;
}

export interface PurpleIntroduce {
    en: string;
    th: string;
}

export interface OrgOrg {
    branding:       FluffyBranding;
    email:          string;
    location:       string;
    name:           string;
    social_network: SocialNetwork;
    website:        string;
}

export interface FluffyBranding {
    cover: string;
    logo:  string;
}

export interface SocialNetwork {
    github:   string;
    steemit:  string;
    telegram: string;
    twitter:  string;
}

export interface Support {
    email: string;
    name:  string;
}

export interface Tagline {
    en:  string;
    zh?: string;
    th?: string;
}

export interface MessageSummary {
    general:     ChainEnum;
    org?:        ChainEnum;
    regproducer: ChainEnum;
    chain?:      ChainEnum;
    endpoint?:   ChainEnum;
}

export enum ChainEnum {
    Crit = "crit",
    Err = "err",
    Info = "info",
    Ok = "ok",
    Skip = "skip",
    Warn = "warn",
}

export interface Message {
    class:               Class;
    detail:              string;
    kind:                ChainEnum;
    last_update_time?:   string;
    value?:              number | string;
    key?:                string;
    field?:              Field | null;
    see1?:               string;
    add_to_list?:        AddToList;
    content_type?:       ContentType;
    cors?:               Cors;
    dupe?:               ChainEnum;
    url?:                null | string;
    failure_code?:       ChainEnum;
    info?:               MessageInfo | null;
    resource?:           AddToList;
    result?:             Result | null;
    response_url?:       string;
    add_info_to_list?:   ChainEnum;
    add_result_to_list?: AddResultToList;
    api_url?:            string;
    extra_check?:        ExtraCheck;
    location?:           MessageLocation;
    node_type?:          NodeType | null;
    non_standard_port?:  number;
    port?:               number | string;
    ssl?:                SSL;
    timeout?:            number;
    url_ext?:            URLEXT;
    host?:               string;
    count?:              number;
    contract?:           Contract;
    connection_field?:   ConnectionField;
    peer?:               string;
    explanation?:        string;
    dns?:                string;
    diff?:               string;
    see2?:               string;
    suggested_value?:    string;
    ip?:                 string;
    target?:             string;
}

export enum AddResultToList {
    Response = "response",
}

export enum AddToList {
    NodesAPIHTTP = "nodes/api_http",
    NodesAPIHTTPS = "nodes/api_https",
    NodesBnet = "nodes/bnet",
    NodesP2P = "nodes/p2p",
    ResourcesBpjson = "resources/bpjson",
    ResourcesChainjson = "resources/chainjson",
    ResourcesConduct = "resources/conduct",
    ResourcesOwnership = "resources/ownership",
    ResourcesRegproducerURL = "resources/regproducer_url",
    ResourcesSocialLogo1024 = "resources/social_logo_1024",
    ResourcesSocialLogo256 = "resources/social_logo_256",
    ResourcesSocialLogoSVG = "resources/social_logo_svg",
    ResourcesWebsite = "resources/website",
}

export enum Class {
    Chain = "chain",
    Endpoint = "endpoint",
    General = "general",
    Org = "org",
    Regproducer = "regproducer",
}

export enum ConnectionField {
    Bnet = "bnet",
    P2P = "p2p",
}

export enum ContentType {
    HTML = "html",
    JSON = "json",
    PNGJpg = "png_jpg",
    SVG = "svg",
}

export enum Contract {
    Eosheartbeat = "eosheartbeat",
    Producerjson = "producerjson",
    Theblacklist = "theblacklist",
}

export enum Cors {
    Either = "either",
    On = "on",
    Should = "should",
}

export enum ExtraCheck {
    ValidateAPIExtraCheck = "validate_api_extra_check",
}

export enum Field {
    BPInfoJSONURL = "BP info JSON URL",
    ChainsJSON = "CHAINS JSON",
    FieldOrgSocialMedium = "org.social.Medium",
    MainWebSite = "main web site",
    Node0 = "node[0]",
    Node0APIEndpoint = "node[0].api_endpoint",
    Node0BnetEndpoint = "node[0].bnet_endpoint",
    Node0IsProducer = "node[0].is_producer",
    Node0Location = "node[0].location",
    Node0P2PEndpoint = "node[0].p2p_endpoint",
    Node0SSLEndpoint = "node[0].ssl_endpoint",
    Node1 = "node[1]",
    Node1APIEndpoint = "node[1].api_endpoint",
    Node1BnetEndpoint = "node[1].bnet_endpoint",
    Node1IsProducer = "node[1].is_producer",
    Node1Location = "node[1].location",
    Node1NodeType = "node[1].node_type",
    Node1P2PEndpoint = "node[1].p2p_endpoint",
    Node1SSLEndpoint = "node[1].ssl_endpoint",
    Node2 = "node[2]",
    Node2APIEndpoint = "node[2].api_endpoint",
    Node2BnetEndpoint = "node[2].bnet_endpoint",
    Node2IsProducer = "node[2].is_producer",
    Node2Location = "node[2].location",
    Node2P2PEndpoint = "node[2].p2p_endpoint",
    Node2SSLEndpoint = "node[2].ssl_endpoint",
    Node3APIEndpoint = "node[3].api_endpoint",
    Node3Location = "node[3].location",
    Node3P2PEndpoint = "node[3].p2p_endpoint",
    Node3SSLEndpoint = "node[3].ssl_endpoint",
    Node4Location = "node[4].location",
    Node4P2PEndpoint = "node[4].p2p_endpoint",
    Node5APIEndpoint = "node[5].api_endpoint",
    Node5Location = "node[5].location",
    Node5P2PEndpoint = "node[5].p2p_endpoint",
    Node5SSLEndpoint = "node[5].ssl_endpoint",
    Node6Location = "node[6].location",
    Node6P2PEndpoint = "node[6].p2p_endpoint",
    Node7Location = "node[7].location",
    Node8Location = "node[8].location",
    OrgBranding = "org.branding",
    OrgBrandingLogo1024 = "org.branding.logo_1024",
    OrgBrandingLogo256 = "org.branding.logo_256",
    OrgBrandingLogoSVG = "org.branding.logo_svg",
    OrgCandidateName = "org.candidate_name",
    OrgCodeOfConduct = "org.code_of_conduct",
    OrgEmail = "org.email",
    OrgLocation = "org.location",
    OrgOwnershipDisclosure = "org.ownership_disclosure",
    OrgSocial = "org.social",
    OrgSocialFacebook = "org.social.facebook",
    OrgSocialGithub = "org.social.github",
    OrgSocialKeybase = "org.social.keybase",
    OrgSocialMedium = "org.social.medium",
    OrgSocialReddit = "org.social.reddit",
    OrgSocialSteem = "org.social.steem",
    OrgSocialSteemit = "org.social.steemit",
    OrgSocialTelegram = "org.social.telegram",
    OrgSocialTwitter = "org.social.twitter",
    OrgSocialWebo = "org.social.webo",
    OrgSocialWechat = "org.social.wechat",
    OrgSocialYoutube = "org.social.youtube",
    OrgWebsite = "org.website",
    ProducerAccountName = "producer_account_name",
    ProducerPublicKey = "producer_public_key",
}

export interface MessageInfo {
    server_version?: Version;
}

export enum Version {
    Eosio143 = "eosio-1.4.3",
    Eosio144 = "eosio-1.4.4",
    Eosio151 = "eosio-1.5.1",
    Eosio152 = "eosio-1.5.2",
    Eosio153 = "eosio-1.5.3",
    Eosio160 = "eosio-1.6.0",
    Eosio160Rc1 = "eosio-1.6.0-rc1",
    Mainnet142 = "mainnet-1.4.2",
    Mainnet143 = "mainnet-1.4.3",
    Mainnet150 = "mainnet-1.5.0",
    Mainnet151 = "mainnet-1.5.1",
    Mainnet160 = "mainnet-1.6.0",
}

export interface MessageLocation {
    country?:   string;
    latitude?:  number;
    longitude?: number;
    name?:      string;
}

export interface Result {
    nodes?:                       ResultNode[];
    org?:                         ResultOrg;
    producer_account_name?:       string;
    block_cpu_limit?:             number;
    block_net_limit?:             number;
    chain_id?:                    ChainID;
    head_block_id?:               string;
    head_block_num?:              number;
    head_block_producer?:         string;
    head_block_time?:             string;
    last_irreversible_block_id?:  string;
    last_irreversible_block_num?: number;
    server_version?:              string;
    server_version_string?:       string;
    virtual_block_cpu_limit?:     number;
    virtual_block_net_limit?:     number;
    producer_public_key?:         string;
    chains?:                      { [key: string]: string };
    "additional info1"?:          string;
    "additional info2"?:          string;
    Author?:                      string;
    "BP Name"?:                   string;
}

export enum ChainID {
    Aca376F206B8Fc25A6Ed44Dbdc66547C36C6C33E3A119Ffbeaef943642F0E906 = "aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906",
}

export interface ResultNode {
    api_endpoint?:  string;
    location:       MessageLocation;
    node_type?:     NodeType;
    p2p_endpoint?:  string;
    ssl_endpoint?:  string;
    bnet_endpoint?: string;
    is_producer?:   boolean;
}

export interface ResultOrg {
    branding:              TentacledBranding;
    candidate_name:        string;
    code_of_conduct?:      string;
    email:                 string;
    location:              LocationLocation;
    ownership_disclosure?: string;
    social?:               { [key: string]: string };
    website:               string;
    tagline?:              TaglineClass;
    phone?:                string;
    support?:              Support;
}

export interface TentacledBranding {
    logo_1024: string;
    logo_256:  string;
    logo_svg?: string;
}

export enum SSL {
    Off = "off",
    On = "on",
}

export enum URLEXT {
    V1ChainGetInfo = "/v1/chain/get_info",
}

export interface ProducerMeta {
    elapsed_time: number;
    generated_at: string;
}

export interface Output {
    resources: Resources;
    chain?:    ChainClass;
    nodes?:    Nodes;
}

export interface ChainClass {
    blacklist:       string;
    abl_cnt?:        number;
    abl_hash?:       AblHash;
    cpu?:            string;
    db_size?:        number;
    hb_version?:     HbVersion;
    head?:           number;
    interval?:       number;
    latencies?:      { [key: string]: number };
    memory?:         number;
    oncall?:         string;
    result_cpu?:     string;
    result_version?: Version;
    result_vtype?:   ResultVtype;
    version?:        string;
    version_string?: string;
    vtype?:          Vtype;
}

export enum AblHash {
    The1Adf65D8D9272F1634240A0E057910D5C276Ede1Aa96463B8Ad2Fa1Af62E47Ef = "1adf65d8d9272f1634240a0e057910d5c276ede1aa96463b8ad2fa1af62e47ef",
    The3760D5674Ae145Ca748C412E269B3763C587Aff3B755De14449B58C4794Ca9F6 = "3760d5674ae145ca748c412e269b3763c587aff3b755de14449b58c4794ca9f6",
    The38Bdf133655A3E89D3801C593F8Efbf363Ac2Cc06Af8C0A1Ef6C7Dacdd6Adc7C = "38bdf133655a3e89d3801c593f8efbf363ac2cc06af8c0a1ef6c7dacdd6adc7c",
}

export enum HbVersion {
    The1501 = "1.5.01",
}

export enum ResultVtype {
    VtypeBareMetal = "vtype_bare-metal",
    VtypeHvm = "vtype_hvm",
}

export enum Vtype {
    BareMetal = "Bare-metal",
    Hvm = "HVM",
}

export interface Nodes {
    api_http?:  APIHTTP[];
    api_https?: APIHTTP[];
    p2p?:       Bnet[];
    bnet?:      Bnet[];
}

export interface APIHTTP {
    address:    string;
    info:       MessageInfo;
    location:   MessageLocation;
    node_type?: NodeType;
    response:   Response;
}

export interface Response {
    block_cpu_limit:             number;
    block_net_limit:             number;
    chain_id:                    ChainID;
    head_block_id:               string;
    head_block_num:              number;
    head_block_producer:         string;
    head_block_time:             string;
    last_irreversible_block_id:  string;
    last_irreversible_block_num: number;
    server_version:              string;
    server_version_string:       string;
    virtual_block_cpu_limit:     number;
    virtual_block_net_limit:     number;
}

export interface Bnet {
    address:    string;
    location:   MessageLocation;
    node_type?: NodeType;
}

export interface Resources {
    regproducer_url?:  Bpjson[];
    conduct?:          Bpjson[];
    ownership?:        Bpjson[];
    social_logo_1024?: Bpjson[];
    social_logo_256?:  Bpjson[];
    social_logo_svg?:  Bpjson[];
    website?:          Bpjson[];
    bpjson?:           Bpjson[];
    chainjson?:        Bpjson[];
}

export interface Bpjson {
    address: string;
}

export interface Regproducer {
    is_active:       number;
    last_claim_time: string;
    location:        number;
    owner:           string;
    producer_key:    string;
    total_votes:     string;
    unpaid_blocks:   number;
    url:             string;
}
